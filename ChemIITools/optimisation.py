# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_EnergySurfaces.ipynb.

# %% auto 0
__all__ = ['generate_smiles']

# %% ../nbs/01_EnergySurfaces.ipynb 3
#| echo: false
from rdkit import Chem
from rdkit.Chem.Draw import IPythonConsole
from rdkit.Chem import Draw

import numpy as np
import matplotlib.pyplot as plt

# %% ../nbs/01_EnergySurfaces.ipynb 4
def generate_smiles(type, n):
    """
    generate the smiles of either a straight chain or ring polyene, with n atoms.
    All carbons will be sp2 hybridised.
    For linear molecules with an odd number of atoms it will return the anion
    For rings with 4n+1 atoms it will return the anion eg C5H5-    
    For rings with 4n+3 atoms it will return the cation eg C7H7+   
    """
    unit = 'C=C'# the base 2 carbon double bond unit
    if n<3: type = 'linear' #ring needs at least 3 atoms
    if n <=1: 
        raise Exception("More than 1 Carbon atoms is needed")
    if not isinstance(n, int): 
        raise Exception("An integer number of atoms is needed")
    if type == 'linear':
        repeats = n//2 # repeats of the base unit of 2 carbons
        terminal = n%2 # whether or not a terminal carbon is needed
        output = repeats*unit +terminal*"[CH2+]"
    if type == 'ring':
        repeats = n//2 # repeats of the base unit of 2 carbons
        cation_terminal = 1 if n%4==3 else 0 # if 4n+3 carbon atoms: cation eg C7H7+
        anion_terminal = 1 if n%4==1 else 0 # if 4n+3 carbon atoms: cation eg C5H5-
        output = "C1=C" +(repeats-1)*unit +anion_terminal*"[CH-]"+cation_terminal*"[CH+]"+"1"
    return(output)
